{"version":3,"sources":["../src/sun.ts"],"names":[],"mappings":";AAGA,IAAM,iBAAiB;AAKvB,IAAM,mBAAmB,MAAM;AAK/B,IAAM,eAAe,KAAK,KAAK;AAK/B,IAAM,cAAc;AAKpB,SAAS,aAAa,MAAoB;AACxC,SAAO,KAAK;AAAA,KACT,KAAK,QAAQ,IAAI,IAAI,KAAK,KAAK,YAAY,GAAG,GAAG,CAAC,EAAE,QAAQ,KAC3D;AAAA,EACJ;AACF;AAKA,SAAS,OAAO,KAAqB;AACnC,SAAO,KAAK,IAAK,MAAM,IAAM,KAAK,KAAM,GAAK;AAC/C;AAKA,SAAS,QAAQ,GAAmB;AAClC,SAAQ,KAAK,KAAK,CAAC,IAAI,OAAU,IAAI,KAAK;AAC5C;AAKA,SAAS,QAAQ,GAAmB;AAClC,SAAQ,KAAK,KAAK,CAAC,IAAI,OAAU,IAAI,KAAK;AAC5C;AAKA,SAAS,OAAO,KAAqB;AACnC,SAAO,KAAK,IAAK,MAAM,IAAM,KAAK,KAAM,GAAK;AAC/C;AAKA,SAAS,OAAO,KAAqB;AACnC,SAAO,KAAK,IAAK,MAAM,IAAM,KAAK,KAAM,GAAK;AAC/C;AAKA,SAAS,IAAI,GAAW,GAAmB;AACzC,QAAM,SAAS,IAAI;AAEnB,SAAO,SAAS,IAAI,SAAS,IAAI;AACnC;AAKA,SAAS,UACP,UACA,WACA,WACA,QACA,MACM;AACN,QAAM,YAAY,aAAa,IAAI;AACnC,QAAM,oBAAoB,YAAY;AACtC,QAAM,0BAA0B,YAC5B,aAAa,IAAI,qBAAqB,KACtC,aAAa,KAAO,qBAAqB;AAE7C,QAAM,iBAAiB,SAAS,0BAA0B;AAC1D,QAAM,mBAAmB;AAAA,IACvB,iBACE,QAAQ,OAAO,cAAc,IAC7B,OAAO,OAAO,IAAI,cAAc,IAChC;AAAA,IACF;AAAA,EACF;AACA,QAAM,YAAY,UAAU,OAAO,gBAAgB;AAEnD,MAAI;AACJ,mBAAkB,OAAO,IAAI,KAAK,MAAO,KAAK,KAAK,SAAS;AAC5D,mBAAiB,IAAI,gBAAgB,GAAG;AAExC,QAAM,YAAY,KAAK,MAAM,mBAAmB,EAAE,IAAI;AACtD,QAAM,aAAa,KAAK,MAAM,iBAAiB,EAAE,IAAI;AACrD,mBAAiB,kBAAkB,YAAY;AAC/C,oBAAkB;AAElB,QAAM,SAAS,UAAU,OAAO,gBAAgB;AAChD,QAAM,SAAS,OAAO,QAAQ,MAAM,CAAC;AACrC,QAAM,qBACH,OAAO,MAAM,IAAI,SAAS,OAAO,QAAQ,MAAM,SAAS,OAAO,QAAQ;AAE1E,QAAM,iBAAiB,YACnB,MAAM,QAAQ,iBAAiB,IAC/B,QAAQ,iBAAiB;AAE7B,QAAM,YAAY,iBAAiB;AACnC,QAAM,gBACJ,YAAY,iBAAiB,UAAU,0BAA0B;AACnE,QAAM,OAAO,IAAI,gBAAgB,YAAY,kBAAkB,EAAE;AACjE,QAAM,cAAc,KAAK;AAAA,IACvB,KAAK,YAAY;AAAA,IACjB,KAAK,SAAS;AAAA,IACd,KAAK,QAAQ;AAAA,EACf;AAGA,SAAO,IAAI,KAAK,cAAc,OAAO,YAAY;AACnD;AAKO,SAAS,WACd,UACA,WACA,OAAO,oBAAI,KAAK,GACV;AACN,SAAO,UAAU,UAAU,WAAW,MAAM,gBAAgB,IAAI;AAClE;AAKO,SAAS,UACd,UACA,WACA,OAAO,oBAAI,KAAK,GACV;AACN,SAAO,UAAU,UAAU,WAAW,OAAO,gBAAgB,IAAI;AACnE","sourcesContent":["/**\n * Default zenith\n */\nconst DEFAULT_ZENITH = 90.8333;\n\n/**\n * Degrees per hour\n */\nconst DEGREES_PER_HOUR = 360 / 24;\n\n/**\n * Msec in hour\n */\nconst MSEC_IN_HOUR = 60 * 60 * 1000;\n\n/**\n * Msec in day\n */\nconst MSEC_IN_DAY = 8.64e7;\n\n/**\n * Get day of year\n */\nfunction getDayOfYear(date: Date): number {\n  return Math.ceil(\n    (date.getTime() - new Date(date.getFullYear(), 0, 1).getTime()) /\n      MSEC_IN_DAY\n  );\n}\n\n/**\n * Get sin of value in deg\n */\nfunction sinDeg(deg: number): number {\n  return Math.sin((deg * 2.0 * Math.PI) / 360.0);\n}\n\n/**\n * Get acos of value in deg\n */\nfunction acosDeg(x: number): number {\n  return (Math.acos(x) * 360.0) / (2 * Math.PI);\n}\n\n/**\n * Get asin of value in deg\n */\nfunction asinDeg(x: number): number {\n  return (Math.asin(x) * 360.0) / (2 * Math.PI);\n}\n\n/**\n * Get tan of value in deg\n */\nfunction tanDeg(deg: number): number {\n  return Math.tan((deg * 2.0 * Math.PI) / 360.0);\n}\n\n/**\n * Get cos of value in deg\n */\nfunction cosDeg(deg: number): number {\n  return Math.cos((deg * 2.0 * Math.PI) / 360.0);\n}\n\n/**\n * Get ramainder\n */\nfunction mod(a: number, b: number): number {\n  const result = a % b;\n\n  return result < 0 ? result + b : result;\n}\n\n/**\n * Calculate Date for either sunrise or sunset\n */\nfunction calculate(\n  latitude: number,\n  longitude: number,\n  isSunrise: boolean,\n  zenith: number,\n  date: Date\n): Date {\n  const dayOfYear = getDayOfYear(date);\n  const hoursFromMeridian = longitude / DEGREES_PER_HOUR;\n  const approxTimeOfEventInDays = isSunrise\n    ? dayOfYear + (6 - hoursFromMeridian) / 24\n    : dayOfYear + (18.0 - hoursFromMeridian) / 24;\n\n  const sunMeanAnomaly = 0.9856 * approxTimeOfEventInDays - 3.289;\n  const sunTrueLongitude = mod(\n    sunMeanAnomaly +\n      1.916 * sinDeg(sunMeanAnomaly) +\n      0.02 * sinDeg(2 * sunMeanAnomaly) +\n      282.634,\n    360\n  );\n  const ascension = 0.91764 * tanDeg(sunTrueLongitude);\n\n  let rightAscension;\n  rightAscension = (360 / (2 * Math.PI)) * Math.atan(ascension);\n  rightAscension = mod(rightAscension, 360);\n\n  const lQuadrant = Math.floor(sunTrueLongitude / 90) * 90;\n  const raQuadrant = Math.floor(rightAscension / 90) * 90;\n  rightAscension = rightAscension + (lQuadrant - raQuadrant);\n  rightAscension /= DEGREES_PER_HOUR;\n\n  const sinDec = 0.39782 * sinDeg(sunTrueLongitude);\n  const cosDec = cosDeg(asinDeg(sinDec));\n  const cosLocalHourAngle =\n    (cosDeg(zenith) - sinDec * sinDeg(latitude)) / (cosDec * cosDeg(latitude));\n\n  const localHourAngle = isSunrise\n    ? 360 - acosDeg(cosLocalHourAngle)\n    : acosDeg(cosLocalHourAngle);\n\n  const localHour = localHourAngle / DEGREES_PER_HOUR;\n  const localMeanTime =\n    localHour + rightAscension - 0.06571 * approxTimeOfEventInDays - 6.622;\n  const time = mod(localMeanTime - longitude / DEGREES_PER_HOUR, 24);\n  const utcMidnight = Date.UTC(\n    date.getFullYear(),\n    date.getMonth(),\n    date.getDate()\n  );\n\n  // Created date will be set to local (system) time zone.\n  return new Date(utcMidnight + time * MSEC_IN_HOUR);\n}\n\n/**\n * Calculate Sunrise time for given longitude, latitude, zenith and date\n */\nexport function getSunrise(\n  latitude: number,\n  longitude: number,\n  date = new Date()\n): Date {\n  return calculate(latitude, longitude, true, DEFAULT_ZENITH, date);\n}\n\n/**\n * Calculate Sunset time for given longitude, latitude, zenith and date\n */\nexport function getSunset(\n  latitude: number,\n  longitude: number,\n  date = new Date()\n): Date {\n  return calculate(latitude, longitude, false, DEFAULT_ZENITH, date);\n}\n"]}